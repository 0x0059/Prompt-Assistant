---
description: 
globs: 
alwaysApply: true
---
# Bug修复专家指南

本规则提供Prompt Assistant项目的bug修复流程和最佳实践，帮助开发者高效定位和解决问题。

## Bug分析方法论

遇到bug时，请按以下步骤进行分析：

1. **问题复现**
   - 确认bug的具体表现和触发条件
   - 尝试简化复现步骤，找出最小复现场景
   - 记录环境信息（浏览器版本、操作系统等）

2. **错误信息收集**
   - 检查控制台错误日志
   - 查看网络请求是否正常
   - 分析堆栈跟踪信息
   - 必要时添加临时日志记录关键值

3. **代码审查**
   - 检查相关组件和服务的实现
   - 关注数据流向和状态管理
   - 审查最近的代码变更
   - 查找边界条件和异常处理

4. **根因定位**
   - 从表象推导可能的原因
   - 使用二分法缩小问题范围
   - 构建问题假设并验证
   - 关注类型错误和异步问题

## 常见Bug类型及修复思路

### 1. UI渲染问题

主要检查：
- [packages/ui/src/components/](mdc:Users/X/LLM/Prompt-Assistant/packages/ui/src/components) 中的组件实现
- [packages/ui/src/styles/](mdc:Users/X/LLM/Prompt-Assistant/packages/ui/src/styles) 中的样式定义
- 组件的生命周期和响应式数据依赖

修复思路：
- 检查条件渲染逻辑是否正确
- 验证数据是否按预期传递给组件
- 排查CSS选择器优先级和覆盖问题
- 确认响应式计算属性依赖是否完整

### 2. 状态管理问题

主要检查：
- 组件内的状态管理逻辑
- 服务层的状态处理和更新
- 组件间的props传递
- 全局状态的更新触发

修复思路：
- 确认状态更新时机是否正确
- 验证深层对象变更是否正确触发了响应
- 检查状态重置和初始化逻辑
- 分析异步操作中的状态更新时序

### 3. API通信问题

主要检查：
- [packages/core/src/services/llm/](mdc:Users/X/LLM/Prompt-Assistant/packages/core/src/services/llm) 中的模型服务实现
- [api/proxy.js](mdc:Users/X/LLM/Prompt-Assistant/api/proxy.js) 和 [api/stream.js](mdc:Users/X/LLM/Prompt-Assistant/api/stream.js) 中的API代理逻辑
- 网络请求的错误处理和重试机制

修复思路：
- 验证API请求参数格式是否正确
- 检查错误处理是否完善
- 分析网络超时和断连处理
- 确认跨域设置是否有效

### 4. 国际化与本地化问题

主要检查：
- [packages/ui/src/i18n/](mdc:Users/X/LLM/Prompt-Assistant/packages/ui/src/i18n) 中的翻译资源
- 组件中的国际化实现
- 动态内容的翻译处理

修复思路：
- 确认翻译键是否存在
- 检查翻译值中的插值参数
- 验证翻译文件的编码格式
- 排查特殊字符和长文本显示问题

### 5. 性能问题

主要检查：
- 组件的不必要重渲染
- 大量数据处理的优化
- 资源加载和缓存策略
- 计算密集型操作的处理

修复思路：
- 使用缓存和记忆化优化重复计算
- 实现虚拟滚动处理大列表
- 优化组件更新逻辑减少重渲染
- 将耗时操作移至Web Worker

## Bug修复最佳实践

1. **增量修改**
   - 一次只修改一个问题
   - 避免不必要的重构
   - 保持修改的最小化

2. **测试验证**
   - 编写单元测试验证修复
   - 手动测试覆盖边界条件
   - 回归测试相关功能

3. **文档记录**
   - 在提交信息中描述bug原因和修复方法
   - 更新相关文档，标注易错点
   - 添加必要的代码注释解释复杂逻辑

4. **知识沉淀**
   - 总结类似问题的通用解决方案
   - 建立常见问题的排查清单
   - 优化开发过程减少同类问题

## 调试工具推荐

- **Vue开发者工具** - 检查组件层次和状态
- **Chrome开发者工具** - 分析网络、性能和内存
- **Vite调试工具** - 检查构建和依赖问题
- **pnpm命令行** - 清理和重建依赖

## 代码审查示例

对于UI组件bug，通常审查以下几个方面：

```javascript
// 检查props定义
const props = defineProps({
  value: { type: String, required: true },  // 检查类型和是否必填
  options: { type: Array, default: () => [] } // 检查默认值
})

// 检查响应式状态
const state = ref(null) // 初始值是否合适？

// 检查计算属性依赖
const computed = computed(() => {
  // 依赖是否完整？边界情况处理？
  return props.value + props.options.length
})

// 检查生命周期钩子
onMounted(() => {
  // 初始化是否正确？异步操作处理？
})

// 检查事件处理
function handleChange() {
  // 逻辑是否完整？错误处理？
}
```
